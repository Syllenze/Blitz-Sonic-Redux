
; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Type tVector
		Field x#
		Field y#
		Field z#
	End Type

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Type tPlane
		Field a#
		Field b#
		Field c#
		Field d#
	End Type
	
; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

	Const TWOPI# 		= Pi*2.0
	Const HALFPI# 		= Pi*0.5
	Const QUARTERPI#   	= Pi*0.25
	Const EPSILON#     	= 0.000001
	Const OMEGA#       	= 10000000.0

; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
; /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

	; ---- Vector management methods ----
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector.tVector(x#, y#, z#)
		v.tVector = New tVector
			v\x# = x#
			v\y# = y#
			v\z# = z#
		Return v
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Copy.tVector(v1.tVector)
		v.tVector = New tVector
			v\x# = v1\x#
			v\y# = v1\y#
			v\z# = v1\z#
		Return v
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Set(v.tVector, x#, y#, z#)
		v\x# = x#
		v\y# = y#
		v\z# = z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_SetFromVector(v1.tVector, v2.tVector)
		v1\x# = v2\x#
		v1\y# = v2\y#
		v1\z# = v2\z#
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Add(v1.tVector, v2.tVector)
		v1\x# = v1\x#+v2\x#
		v1\y# = v1\y#+v2\y#
		v1\z# = v1\z#+v2\z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Substract(v1.tVector, v2.tVector)
		v1\x# = v1\x#-v2\x#
		v1\y# = v1\y#-v2\y#
		v1\z# = v1\z#-v2\z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Multiply(v1.tVector, v2.tVector)
		v1\x# = v1\x#*v2\x#
		v1\y# = v1\y#*v2\y#
		v1\z# = v1\z#*v2\z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_MultiplyByScalar(v1.tVector, Scalar#)
		v1\x# = v1\x#*Scalar#
		v1\y# = v1\y#*Scalar#
		v1\z# = v1\z#*Scalar#
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Divide(v1.tVector, v2.tVector)
		v1\x# = v1\x#/v2\x#
		v1\y# = v1\y#/v2\y#
		v1\z# = v1\z#/v2\z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_DivideByScalar(v.tVector, Scalar#)
		v\x# = v\x#/Scalar#
		v\y# = v\y#/Scalar#
		v\z# = v\z#/Scalar#
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Length#(v.tVector)
		Return Sqr(v\x#*v\x#+v\y#*v\y#+v\z#*v\z#)
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Normalize(v.tVector)
		Length# = Vector_Length#(v)
		If (Length# <> 0.0) Length# = 1.0/Length#

		v\x# = v\x# * Length
		v\y# = v\y# * Length
		v\z# = v\z# * Length
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_CrossProduct.tVector(v1.tVector, v2.tVector, vout.tVector)
		x# = v1\y*v2\z-v1\z*v2\y
		y# = v1\z*v2\x-v1\x*v2\z
		z# = v1\x*v2\y-v1\y*v2\x
		vout\x# = x# : vout\y# = y# : vout\z# = z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_DotProduct#(v1.tVector, v2.tVector)
		Return v1\x#*v2\x#+v1\y#*v2\y#+v1\z#*v2\z#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_DotProductNormalized#(v1o.tVector, v2o.tVector)
		v1.tVector = Vector_Copy(v1o) : Vector_Normalize(v1)
		v2.tVector = Vector_Copy(v2o) : Vector_Normalize(v2)
		
		Result# = Vector_DotProduct(v1, v2)
		Delete v1 : Delete v2 : Return Result#
	End Function
	
	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_LinearInterpolation(v1.tVector, v2.tVector, t#)
		t# = Min#(Max#(t#, 0.0), 1.0)
		v1\x# = v1\x# + (v2\x#-v1\x#)*t#
		v1\y# = v1\y# + (v2\y#-v1\y#)*t#
		v1\z# = v1\z# + (v2\z#-v1\z#)*t#
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Yaw(v.tVector)
		Return ATan2( v\x#, v\z# )
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_Pitch(v.tVector)
		Return -ATan2( v\y#, Sqr#(v\x#*v\x#+v\z#*v\z#))
	End Function

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------
	Function Vector_AlignTo(Entity, v.tVector, Axis, Rate#=1.0)
	
		Pitch# = (EntityPitch(Entity))
		Yaw#   = (EntityYaw(Entity))
		Roll#  = (EntityRoll(Entity))

		Select Axis
			Case 1
			
				DestYaw#   = (ATan2(v\z#,v\x#))
				DestRoll#  = (ATan2(v\y#,v\x#))
			
				Yaw#   = Yaw#+(DestYaw#-Yaw#)*Rate#
				Roll#  = Roll#+(DestRoll#-Roll#)*Rate#

			Case 2
				
				DestPitch# = (ATan2(v\z#,v\y#))
				DestRoll#  = (-ATan2(v\x#,v\y#))
			
				Pitch# = Pitch#+(DestPitch#-Pitch#)*Rate#
				Roll#  = Roll#+(DestRoll#-Roll#)*Rate#

			Case 3
			
				DestPitch# = (-ATan2(v\y#,v\z#))
				DestYaw#   = (-ATan2(v\x#,v\z#))
	
				Pitch# = Pitch#+(DestPitch#-Pitch#)*Rate#
				Yaw#   = Yaw#+(DestYaw#-Yaw#)*Rate#

		End Select
		
		RotateEntity(Entity, Pitch#, Yaw#, Roll#)
	End Function

	

	; ---------------------------------------------------------------------------------------------------------
	; ---------------------------------------------------------------------------------------------------------


Function StripPath$(file$) 
 If Len(file$)>0 
  For i=Len(file$) To 1 Step -1 
   mi$=Mid$(file$,i,1) 
   If mi$="\" Or mi$="/" Then Return name$ Else name$=mi$+name$ 
  Next 
 EndIf 

 Return name$ 
End Function